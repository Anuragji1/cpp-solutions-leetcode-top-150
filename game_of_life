Problem Statement 38) According to Wikipedia's article: "The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970."

The board is made up of an m x n grid of cells, where each cell has an initial state: live (represented by a 1) or dead (represented by a 0). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):

Any live cell with fewer than two live neighbors dies as if caused by under-population.
Any live cell with two or three live neighbors lives on to the next generation.
Any live cell with more than three live neighbors dies, as if by over-population.
Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.
The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the m x n grid board, return the next state.

 

Example 1:


Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]
Example 2:


Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 25
board[i][j] is 0 or 1.
 

Follow up:

Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.
In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?

------------------------------------------------------------
SOLUTION = class Solution {
public:
int countNeighbours(vector<vector<int>>& board, int row,int col){
    int n=board.size();
    int m=board[0].size();
    int delrow[8]={0,1,0,-1,1,1,-1,-1};
    int delcol[8]={1,0,-1,0,-1,1,1,-1};
    int count=0;
    for(int i=0;i<8;i++){
        int nrow=delrow[i]+row;
        int ncol=delcol[i]+col;
        if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && board[nrow][ncol]==1){
            count++;
        }
    }
    return count;
}
    void gameOfLife(vector<vector<int>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>> curr = board;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((countNeighbours(curr,i,j)<2 || countNeighbours(curr,i,j)>3) && board[i][j]==1){
                    board[i][j]=0;
                }
                else if(countNeighbours(curr,i,j)==3 && board[i][j]==0){
                    board[i][j]=1;
                }
                else if((countNeighbours(curr,i,j)==2 || countNeighbours(curr,i,j)==3) && board[i][j]==1){
                    board[i][j]=1;
                }
            }
        }
    }
};
------------------------------------------
Explanation:

We use two bits in each cell. The first bit is the current state (alive or dead), and the second bit is the next state.
We iterate through each cell and count its live neighbors.
Based on the rules and the number of neighbors, we set the next state bit (alive or dead).
After iterating through all cells, we update the current state with the next state for each cell by shifting the next state bit to the current state position.
Benefits:

In-place: This solution updates the board in-place without needing additional memory.
Efficient: Using bit manipulation improves performance by relying on bitwise operations instead of conditional statements.
Addressing Infinite Board:

This solution assumes a finite board represented by a 2D array. To handle an infinite board, you can implement several approaches:

Toroidal grid: Wrap the edges of the array so that cells on opposite sides are neighbors.
Padding: Pad the edges of the array with dead cells to avoid accessing nonexistent neighbors.
Custom data structure: Use a data structure like a sparse matrix that only stores occupied cells, reducing memory usage for large boards with mostly dead cells.
